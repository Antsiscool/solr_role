---

- name: Solr | Check if collections configs exists
  uri:
    url: "{{ solr_url }}/{{ item.key }}/config"
    return_content: true
    status_code: 200,404
  register: config_exists_api_responses
  changed_when: false
  with_dict: "{{ solr_collections }}"

- name: Solr | Create directories for collections in tmp directories
  file:
    path: "{{ solr_collections_config_tmp_dir }}/{{ item.path }}"
    state: directory
    owner: "{{ solr_user }}"
    group: "{{ solr_group }}"
  with_filetree:
    - "{{ solr_collections_template_path }}"
  when: item.state == 'directory'

- name: Solr | Copy files for collections configs in tmp directories
  copy:
    src: "{{ solr_collections_files_path }}"
    dest: "{{ solr_collections_config_tmp_dir }}"
    owner: "{{ solr_user }}"
    group: "{{ solr_group }}"
  register: synchronized_config_copy
  ignore_errors: true

- name: Solr | Apply config to files for collections in tmp directories
  template:
    src: "{{ item.src }}"
    dest: "{{ solr_collections_config_tmp_dir }}/{{ item.path | regex_replace('.j2','') }}"
    owner: "{{ solr_user }}"
    group: "{{ solr_group }}"
    force: true
  register: synchronized_config_template
  with_filetree: "{{ solr_collections_template_path }}"
  when: item.state == 'file'
  ignore_errors: true

- name: Solr | Upload initial config
  command: >
    {{ solr_zookeeper_client_path }}/zkcli.sh
    -zkhost {{ solr_zookeeper_hosts }}/{{ solr_zookeeper_hosts_solr_path }}
    -cmd upconfig
    -confname {{ item.key }}
    -confdir {{ solr_collections_config_tmp_dir }}/{{ item.key }}
  when: synchronized_config_copy.changed or synchronized_config_template.changed
  with_dict: "{{ solr_collections }}"
  tags: skip_ansible_lint

- name: Solr | Return existing collections
  uri:
    url: "{{ solr_url }}/admin/collections?action=LIST"
    return_content: true
  register: existing_collections
  changed_when: false

- name: Solr | Create new collections
  uri:
    url: "{{ solr_url }}/admin/collections?action=CREATE&name={{ item }}&numShards={{ solr_collections[item].shards }}&replicationFactor={{ solr_collections[item].replicas }}&collection.configName={{ item }}&maxShardsPerNode={{ solr_collections[item].shards_per_node }}&autoAddReplicas={{ solr_collections[item].auto_add_replicas | default('true') }}"
  with_items: "{{ solr_collections.keys() | difference(existing_collections.json.collections) }}"

- name: Solr | Modify existing collections
  uri:
    url: "{{ solr_url }}/admin/collections?action=MODIFYCOLLECTION&collection={{ item }}&replicationFactor={{ solr_collections[item].replicas }}&maxShardsPerNode={{ solr_collections[item].shards_per_node }}&autoAddReplicas=true"
  with_items: "{{ existing_collections.json.collections | intersect(solr_collections.keys()) }}"

- name: Solr | Reload modified collections
  uri:
    url: "{{ solr_url }}/admin/collections?action=RELOAD&name={{ item }}"
  with_items: "{{ existing_collections.json.collections | intersect(solr_collections.keys()) }}"

- name: Solr | Delete collections that exists in Solr but not in given configuration
  uri:
    url: "{{ solr_url }}/admin/collections?action=DELETE&name={{ item }}"
  with_items: "{{ existing_collections.json.collections | difference(solr_collections.keys()) }}"

# - name: Solr | Remove directories for collections in tmp directories
#   file:
#     path: "{{ solr_collections_config_tmp_dir }}/{{ item.path }}"
#     state: absent
#   with_filetree:
#     - "{{ solr_collections_template_path }}"
